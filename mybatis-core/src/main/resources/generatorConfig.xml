<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
  PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
  "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">

<generatorConfiguration>
  <properties resource="jdbc.properties"></properties>
  <!--mysql 连接数据库jar 这里选择自己本地位置
  <classPathEntry
    location="/Users/wangfeng/.m2/repository/mysql/mysql-connector-java/5.1.40/mysql-connector-java-5.1.40.jar"/>-->
  <context id="testTables" targetRuntime="MyBatis3">
    <!-- 生成的Java文件的编码 -->
    <property name="javaFileEncoding" value="UTF-8"/>
    <!-- 格式化java代码 -->
    <property name="javaFormatter" value="org.mybatis.generator.api.dom.DefaultJavaFormatter"/>
    <!-- 格式化XML代码 -->
    <property name="xmlFormatter" value="org.mybatis.generator.api.dom.DefaultXmlFormatter"/>
    <commentGenerator>
      <!-- 是否去除自动生成的注释 true：是 ： false:否 -->
      <property name="suppressAllComments" value="true"/>
      <property name="suppressDate" value="true"/>
    </commentGenerator>

    <!--数据库连接的信息：驱动类、连接地址、用户名、密码 -->
    <!--This is a change in MySQL Connector from version 5.x to 6.x as commented here.
        In order to get MyBatis work with 6.x you could append nullNamePatternMatchesAll=true to
        your JDBC string. You probably have to escape the & to &amp; in your XML.-->
    <jdbcConnection driverClass="com.mysql.jdbc.Driver"
      connectionURL="${jdbc.url}"
      userId="${jdbc.username}"
      password="${jdbc.password}">
    </jdbcConnection>
    <!-- 默认false，把JDBC DECIMAL 和 NUMERIC 类型解析为 Integer，为 true时把JDBC DECIMAL 和
       NUMERIC 类型解析为java.math.BigDecimal -->
    <!-- java类型处理器
           用于处理DB中的类型到Java中的类型，默认使用JavaTypeResolverDefaultImpl；
           注意一点，默认会先尝试使用Integer，Long，Short等来对应DECIMAL和 NUMERIC数据类型；
       -->
    <javaTypeResolver type="org.mybatis.generator.internal.types.JavaTypeResolverDefaultImpl">
      <!--
          true：使用BigDecimal对应DECIMAL和 NUMERIC数据类型
          false：默认,
              scale>0;length>18：使用BigDecimal;
              scale=0;length[10,18]：使用Long；
              scale=0;length[5,9]：使用Integer；
              scale=0;length<5：使用Short；
       -->
      <property name="forceBigDecimals" value="false"/>
    </javaTypeResolver>


    <!-- targetProject:生成PO类的位置 -->
    <javaModelGenerator targetPackage="com.wangfeng.model" targetProject="src/main/java">
      <!-- enableSubPackages:是否让schema作为包的后缀 -->
      <property name="enableSubPackages" value="false"/>
      <!-- 从数据库返回的值被清理前后的空格 -->
      <property name="trimStrings" value="true"/>
    </javaModelGenerator>
    <!-- targetProject:mapper映射文件生成的位置
       如果maven工程只是单独的一个工程，targetProject="src/main/java"
       若果maven工程是分模块的工程，targetProject="所属模块的名称"，例如：
       targetProject="ecps-manager-mapper"，下同-->
    <sqlMapGenerator targetPackage="com.wangfeng.mapper"
      targetProject="src/main/java">
      <!-- enableSubPackages:是否让schema作为包的后缀 -->
      <property name="enableSubPackages" value="false"/>
    </sqlMapGenerator>
    <!-- targetPackage：mapper接口生成的位置 -->
    <!-- 客户端代码，生成易于使用的针对Model对象和XML配置文件 的代码
               type="ANNOTATEDMAPPER",生成Java Model 和基于注解的Mapper对象
               type="MIXEDMAPPER",生成基于注解的Java Model 和相应的Mapper对象
               type="XMLMAPPER",生成SQLMap XML文件和独立的Mapper接口
       -->
    <javaClientGenerator type="XMLMAPPER"
      targetPackage="com.wangfeng.mapper"
      targetProject="src/main/java">
      <!-- enableSubPackages:是否让schema作为包的后缀 -->
      <property name="enableSubPackages" value="false"/>
    </javaClientGenerator>
    <!-- 选择一个table来生成相关文件，可以有一个或多个table，必须要有table元素
            选择的table会生成一下文件：
            1，SQL map文件
            2，生成一个主键类；
            3，除了BLOB和主键的其他字段的类；
            4，包含BLOB的类；
            5，一个用户生成动态查询的条件类（selectByExample, deleteByExample），可选；
            6，Mapper接口（可选）

            tableName（必要）：要生成对象的表名；
            注意：大小写敏感问题。正常情况下，MBG会自动的去识别数据库标识符的大小写敏感度，在一般情况下，MBG会
                根据设置的schema，catalog或tablename去查询数据表，按照下面的流程：
                1，如果schema，catalog或tablename中有空格，那么设置的是什么格式，就精确的使用指定的大小写格式去查询；
                2，否则，如果数据库的标识符使用大写的，那么MBG自动把表名变成大写再查找；
                3，否则，如果数据库的标识符使用小写的，那么MBG自动把表名变成小写再查找；
                4，否则，使用指定的大小写格式查询；
            另外的，如果在创建表的时候，使用的""把数据库对象规定大小写，就算数据库标识符是使用的大写，在这种情况下也会使用给定的大小写来创建表名；
            这个时候，请设置delimitIdentifiers="true"即可保留大小写格式；

            可选：
            1，schema：数据库的schema；
            2，catalog：数据库的catalog；
            3，alias：为数据表设置的别名，如果设置了alias，那么生成的所有的SELECT SQL语句中，列名会变成：alias_actualColumnName
            4，domainObjectName：生成的domain类的名字，如果不设置，直接使用表名作为domain类的名字；可以设置为somepck.domainName，那么会自动把domainName类再放到somepck包里面；
            5，enableInsert（默认true）：指定是否生成insert语句；
            6，enableSelectByPrimaryKey（默认true）：指定是否生成按照主键查询对象的语句（就是getById或get）；
            7，enableSelectByExample（默认true）：MyBatis3Simple为false，指定是否生成动态查询语句；
            8，enableUpdateByPrimaryKey（默认true）：指定是否生成按照主键修改对象的语句（即update)；
            9，enableDeleteByPrimaryKey（默认true）：指定是否生成按照主键删除对象的语句（即delete）；
            10，enableDeleteByExample（默认true）：MyBatis3Simple为false，指定是否生成动态删除语句；
            11，enableCountByExample（默认true）：MyBatis3Simple为false，指定是否生成动态查询总条数语句（用于分页的总条数查询）；
            12，enableUpdateByExample（默认true）：MyBatis3Simple为false，指定是否生成动态修改语句（只修改对象中不为空的属性）；
            13，modelType：参考context元素的defaultModelType，相当于覆盖；
            14，delimitIdentifiers：参考tableName的解释，注意，默认的delimitIdentifiers是双引号，如果类似MYSQL这样的数据库，使用的是`（反引号，那么还需要设置context的beginningDelimiter和endingDelimiter属性）
            15，delimitAllColumns：设置是否所有生成的SQL中的列名都使用标识符引起来。默认为false，delimitIdentifiers参考context的属性

            注意，table里面很多参数都是对javaModelGenerator，context等元素的默认属性的一个复写；
         -->
    <!-- 指定数据库表 -->
    <table schema="" tableName="user" domainObjectName="User"
      enableCountByExample="false"
      enableUpdateByExample="false"
      enableDeleteByExample="false"
      enableSelectByExample="false"
      selectByExampleQueryId="false">

      <property name="constructorBased" value="true"/>
      <property name="useActualColumnNames" value="false"/>
      <property name="ignoreQualifiersAtRuntime" value="true"/>
      <generatedKey column="ID" sqlStatement="selectuuid_short()"
        identity="false"/>
      <!-- 参考 javaModelGenerator 的 constructorBased属性-->
      <!--<property name="constructorBased" value="false"/>-->

      <!-- 默认为false，如果设置为true，在生成的SQL中，table名字不会加上catalog或schema； -->
      <!--<property name="ignoreQualifiersAtRuntime" value="false"/>-->

      <!-- 参考 javaModelGenerator 的 immutable 属性 -->
      <!--<property name="immutable" value="false"/>-->

      <!-- 指定是否只生成domain类，如果设置为true，只生成domain类，如果还配置了sqlMapGenerator，那么在mapper XML文件中，只生成resultMap元素 -->
      <!--<property name="modelOnly" value="false"/>-->

      <!-- 参考 javaModelGenerator 的 rootClass 属性
      <property name="rootClass" value=""/>
       -->

      <!-- 参考javaClientGenerator 的  rootInterface 属性
      <property name="rootInterface" value=""/>
      -->

      <!-- 如果设置了runtimeCatalog，那么在生成的SQL中，使用该指定的catalog，而不是table元素上的catalog
      <property name="runtimeCatalog" value=""/>
      -->

      <!-- 如果设置了runtimeSchema，那么在生成的SQL中，使用该指定的schema，而不是table元素上的schema
      <property name="runtimeSchema" value=""/>
      -->

      <!-- 如果设置了runtimeTableName，那么在生成的SQL中，使用该指定的tablename，而不是table元素上的tablename
      <property name="runtimeTableName" value=""/>
      -->

      <!-- 注意，该属性只针对MyBatis3Simple有用；
          如果选择的runtime是MyBatis3Simple，那么会生成一个SelectAll方法，如果指定了selectAllOrderByClause，那么会在该SQL中添加指定的这个order条件；
       -->
      <!--<property name="selectAllOrderByClause" value="age desc,username asc"/>-->

      <!-- 如果设置为true，生成的model类会直接使用column本身的名字，而不会再使用驼峰命名方法，比如BORN_DATE，生成的属性名字就是BORN_DATE,而不会是bornDate -->
      <!--<property name="useActualColumnNames" value="false"/>-->


      <!-- generatedKey用于生成生成主键的方法，
          如果设置了该元素，MBG会在生成的<insert>元素中生成一条正确的<selectKey>元素，该元素可选
          column:主键的列名；
          sqlStatement：要生成的selectKey语句，有以下可选项：
              Cloudscape:相当于selectKey的SQL为： VALUES IDENTITY_VAL_LOCAL()
              DB2       :相当于selectKey的SQL为： VALUES IDENTITY_VAL_LOCAL()
              DB2_MF    :相当于selectKey的SQL为：SELECT IDENTITY_VAL_LOCAL() FROM SYSIBM.SYSDUMMY1
              Derby      :相当于selectKey的SQL为：VALUES IDENTITY_VAL_LOCAL()
              HSQLDB      :相当于selectKey的SQL为：CALL IDENTITY()
              Informix  :相当于selectKey的SQL为：select dbinfo('sqlca.sqlerrd1') from systables where tabid=1
              MySql      :相当于selectKey的SQL为：SELECT LAST_INSERT_ID()
              SqlServer :相当于selectKey的SQL为：SELECT SCOPE_IDENTITY()
              SYBASE      :相当于selectKey的SQL为：SELECT @@IDENTITY
              JDBC      :相当于在生成的insert元素上添加useGeneratedKeys="true"和keyProperty属性
      <generatedKey column="" sqlStatement=""/>
       -->

      <!--
          该元素会在根据表中列名计算对象属性名之前先重命名列名，非常适合用于表中的列都有公用的前缀字符串的时候，
          比如列名为：CUST_ID,CUST_NAME,CUST_EMAIL,CUST_ADDRESS等；
          那么就可以设置searchString为"^CUST_"，并使用空白替换，那么生成的Customer对象中的属性名称就不是
          custId,custName等，而是先被替换为ID,NAME,EMAIL,然后变成属性：id，name，email；

          注意，MBG是使用java.util.regex.Matcher.replaceAll来替换searchString和replaceString的，
          如果使用了columnOverride元素，该属性无效；

      <columnRenamingRule searchString="" replaceString=""/>
       -->


      <!-- 用来修改表中某个列的属性，MBG会使用修改后的列来生成domain的属性；
          column:要重新设置的列名；
          注意，一个table元素中可以有多个columnOverride元素哈~
       -->
      <!--<columnOverride column="username">-->
      <!-- 使用property属性来指定列要生成的属性名称 -->
      <!--<property name="property" value="userName"/>-->

      <!-- javaType用于指定生成的domain的属性类型，使用类型的全限定名
      <property name="javaType" value=""/>
       -->

      <!-- jdbcType用于指定该列的JDBC类型
      <property name="jdbcType" value=""/>
       -->

      <!-- typeHandler 用于指定该列使用到的TypeHandler，如果要指定，配置类型处理器的全限定名
          注意，mybatis中，不会生成到mybatis-config.xml中的typeHandler
          只会生成类似：where id = #{id,jdbcType=BIGINT,typeHandler=com._520it.mybatis.MyTypeHandler}的参数描述
      <property name="jdbcType" value=""/>
      -->

      <!-- 参考table元素的delimitAllColumns配置，默认为false
      <property name="delimitedColumnName" value=""/>
       -->
      <!--</columnOverride>-->

      <!-- ignoreColumn设置一个MGB忽略的列，如果设置了改列，那么在生成的domain中，生成的SQL中，都不会有该列出现
          column:指定要忽略的列的名字；
          delimitedColumnName：参考table元素的delimitAllColumns配置，默认为false

          注意，一个table元素中可以有多个ignoreColumn元素
      <ignoreColumn column="deptId" delimitedColumnName=""/>
      -->
    </table>
  </context>
</generatorConfiguration>
